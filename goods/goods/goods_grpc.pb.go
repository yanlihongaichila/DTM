// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: goods.proto

package goods

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Goods_Ping_FullMethodName                      = "/goods.Goods/Ping"
	Goods_GetGoodsByIDs_FullMethodName             = "/goods.Goods/GetGoodsByIDs"
	Goods_UpdateGoodsStocks_FullMethodName         = "/goods.Goods/UpdateGoodsStocks"
	Goods_UpdateGoodsStocksRollback_FullMethodName = "/goods.Goods/UpdateGoodsStocksRollback"
	Goods_TCCTradingNum_FullMethodName             = "/goods.Goods/TCCTradingNum"
	Goods_TCCTradingLockNum_FullMethodName         = "/goods.Goods/TCCTradingLockNum"
	Goods_TCCTradingRollbackNum_FullMethodName     = "/goods.Goods/TCCTradingRollbackNum"
)

// GoodsClient is the client API for Goods service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoodsClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetGoodsByIDs(ctx context.Context, in *GetGoodsByIDsRequest, opts ...grpc.CallOption) (*GetGoodsByIDsResponse, error)
	UpdateGoodsStocks(ctx context.Context, in *UpdateGoodsStocksRequest, opts ...grpc.CallOption) (*UpdateGoodsStocksResponse, error)
	UpdateGoodsStocksRollback(ctx context.Context, in *UpdateGoodsStocksRollbackRequest, opts ...grpc.CallOption) (*UpdateGoodsStocksRollbackResponse, error)
	// TCC
	TCCTradingNum(ctx context.Context, in *TCCTradingNumRequest, opts ...grpc.CallOption) (*TCCTradingNumResponse, error)
	TCCTradingLockNum(ctx context.Context, in *TCCTradingLockNumRequest, opts ...grpc.CallOption) (*TCCTradingLockNumResponse, error)
	TCCTradingRollbackNum(ctx context.Context, in *TCCTradingRollbackNumRequest, opts ...grpc.CallOption) (*TCCTradingRollbackNumResponse, error)
}

type goodsClient struct {
	cc grpc.ClientConnInterface
}

func NewGoodsClient(cc grpc.ClientConnInterface) GoodsClient {
	return &goodsClient{cc}
}

func (c *goodsClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Goods_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) GetGoodsByIDs(ctx context.Context, in *GetGoodsByIDsRequest, opts ...grpc.CallOption) (*GetGoodsByIDsResponse, error) {
	out := new(GetGoodsByIDsResponse)
	err := c.cc.Invoke(ctx, Goods_GetGoodsByIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateGoodsStocks(ctx context.Context, in *UpdateGoodsStocksRequest, opts ...grpc.CallOption) (*UpdateGoodsStocksResponse, error) {
	out := new(UpdateGoodsStocksResponse)
	err := c.cc.Invoke(ctx, Goods_UpdateGoodsStocks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) UpdateGoodsStocksRollback(ctx context.Context, in *UpdateGoodsStocksRollbackRequest, opts ...grpc.CallOption) (*UpdateGoodsStocksRollbackResponse, error) {
	out := new(UpdateGoodsStocksRollbackResponse)
	err := c.cc.Invoke(ctx, Goods_UpdateGoodsStocksRollback_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) TCCTradingNum(ctx context.Context, in *TCCTradingNumRequest, opts ...grpc.CallOption) (*TCCTradingNumResponse, error) {
	out := new(TCCTradingNumResponse)
	err := c.cc.Invoke(ctx, Goods_TCCTradingNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) TCCTradingLockNum(ctx context.Context, in *TCCTradingLockNumRequest, opts ...grpc.CallOption) (*TCCTradingLockNumResponse, error) {
	out := new(TCCTradingLockNumResponse)
	err := c.cc.Invoke(ctx, Goods_TCCTradingLockNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsClient) TCCTradingRollbackNum(ctx context.Context, in *TCCTradingRollbackNumRequest, opts ...grpc.CallOption) (*TCCTradingRollbackNumResponse, error) {
	out := new(TCCTradingRollbackNumResponse)
	err := c.cc.Invoke(ctx, Goods_TCCTradingRollbackNum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoodsServer is the server API for Goods service.
// All implementations must embed UnimplementedGoodsServer
// for forward compatibility
type GoodsServer interface {
	Ping(context.Context, *Request) (*Response, error)
	GetGoodsByIDs(context.Context, *GetGoodsByIDsRequest) (*GetGoodsByIDsResponse, error)
	UpdateGoodsStocks(context.Context, *UpdateGoodsStocksRequest) (*UpdateGoodsStocksResponse, error)
	UpdateGoodsStocksRollback(context.Context, *UpdateGoodsStocksRollbackRequest) (*UpdateGoodsStocksRollbackResponse, error)
	// TCC
	TCCTradingNum(context.Context, *TCCTradingNumRequest) (*TCCTradingNumResponse, error)
	TCCTradingLockNum(context.Context, *TCCTradingLockNumRequest) (*TCCTradingLockNumResponse, error)
	TCCTradingRollbackNum(context.Context, *TCCTradingRollbackNumRequest) (*TCCTradingRollbackNumResponse, error)
	mustEmbedUnimplementedGoodsServer()
}

// UnimplementedGoodsServer must be embedded to have forward compatible implementations.
type UnimplementedGoodsServer struct {
}

func (UnimplementedGoodsServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedGoodsServer) GetGoodsByIDs(context.Context, *GetGoodsByIDsRequest) (*GetGoodsByIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGoodsByIDs not implemented")
}
func (UnimplementedGoodsServer) UpdateGoodsStocks(context.Context, *UpdateGoodsStocksRequest) (*UpdateGoodsStocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsStocks not implemented")
}
func (UnimplementedGoodsServer) UpdateGoodsStocksRollback(context.Context, *UpdateGoodsStocksRollbackRequest) (*UpdateGoodsStocksRollbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGoodsStocksRollback not implemented")
}
func (UnimplementedGoodsServer) TCCTradingNum(context.Context, *TCCTradingNumRequest) (*TCCTradingNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCCTradingNum not implemented")
}
func (UnimplementedGoodsServer) TCCTradingLockNum(context.Context, *TCCTradingLockNumRequest) (*TCCTradingLockNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCCTradingLockNum not implemented")
}
func (UnimplementedGoodsServer) TCCTradingRollbackNum(context.Context, *TCCTradingRollbackNumRequest) (*TCCTradingRollbackNumResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCCTradingRollbackNum not implemented")
}
func (UnimplementedGoodsServer) mustEmbedUnimplementedGoodsServer() {}

// UnsafeGoodsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoodsServer will
// result in compilation errors.
type UnsafeGoodsServer interface {
	mustEmbedUnimplementedGoodsServer()
}

func RegisterGoodsServer(s grpc.ServiceRegistrar, srv GoodsServer) {
	s.RegisterService(&Goods_ServiceDesc, srv)
}

func _Goods_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_GetGoodsByIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGoodsByIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).GetGoodsByIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_GetGoodsByIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).GetGoodsByIDs(ctx, req.(*GetGoodsByIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateGoodsStocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsStocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateGoodsStocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdateGoodsStocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateGoodsStocks(ctx, req.(*UpdateGoodsStocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_UpdateGoodsStocksRollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGoodsStocksRollbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).UpdateGoodsStocksRollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_UpdateGoodsStocksRollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).UpdateGoodsStocksRollback(ctx, req.(*UpdateGoodsStocksRollbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_TCCTradingNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TCCTradingNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).TCCTradingNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_TCCTradingNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).TCCTradingNum(ctx, req.(*TCCTradingNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_TCCTradingLockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TCCTradingLockNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).TCCTradingLockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_TCCTradingLockNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).TCCTradingLockNum(ctx, req.(*TCCTradingLockNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Goods_TCCTradingRollbackNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TCCTradingRollbackNumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoodsServer).TCCTradingRollbackNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Goods_TCCTradingRollbackNum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoodsServer).TCCTradingRollbackNum(ctx, req.(*TCCTradingRollbackNumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Goods_ServiceDesc is the grpc.ServiceDesc for Goods service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Goods_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goods.Goods",
	HandlerType: (*GoodsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Goods_Ping_Handler,
		},
		{
			MethodName: "GetGoodsByIDs",
			Handler:    _Goods_GetGoodsByIDs_Handler,
		},
		{
			MethodName: "UpdateGoodsStocks",
			Handler:    _Goods_UpdateGoodsStocks_Handler,
		},
		{
			MethodName: "UpdateGoodsStocksRollback",
			Handler:    _Goods_UpdateGoodsStocksRollback_Handler,
		},
		{
			MethodName: "TCCTradingNum",
			Handler:    _Goods_TCCTradingNum_Handler,
		},
		{
			MethodName: "TCCTradingLockNum",
			Handler:    _Goods_TCCTradingLockNum_Handler,
		},
		{
			MethodName: "TCCTradingRollbackNum",
			Handler:    _Goods_TCCTradingRollbackNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goods.proto",
}
