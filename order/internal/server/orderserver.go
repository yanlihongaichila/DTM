// Code generated by goctl. DO NOT EDIT.
// Source: order.proto

package server

import (
	"context"

	"order/internal/logic"
	"order/internal/svc"
	"order/order"
)

type OrderServer struct {
	svcCtx *svc.ServiceContext
	order.UnimplementedOrderServer
}

func NewOrderServer(svcCtx *svc.ServiceContext) *OrderServer {
	return &OrderServer{
		svcCtx: svcCtx,
	}
}

func (s *OrderServer) Ping(ctx context.Context, in *order.Request) (*order.Response, error) {
	l := logic.NewPingLogic(ctx, s.svcCtx)
	return l.Ping(in)
}

func (s *OrderServer) CreateOrder(ctx context.Context, in *order.CreateOrderRequest) (*order.CreateOrderResponse, error) {
	l := logic.NewCreateOrderLogic(ctx, s.svcCtx)
	return l.CreateOrder(in)
}

func (s *OrderServer) GetOrderRollback(ctx context.Context, in *order.GetOrderRollbackRequest) (*order.GetOrderRollbackResponse, error) {
	l := logic.NewGetOrderRollbackLogic(ctx, s.svcCtx)
	return l.GetOrderRollback(in)
}

func (s *OrderServer) GetOrder(ctx context.Context, in *order.GetOrderRequest) (*order.GetOrderResponse, error) {
	l := logic.NewGetOrderLogic(ctx, s.svcCtx)
	return l.GetOrder(in)
}

func (s *OrderServer) UpdateOrder(ctx context.Context, in *order.UpdateOrderRequest) (*order.UpdateOrderResponse, error) {
	l := logic.NewUpdateOrderLogic(ctx, s.svcCtx)
	return l.UpdateOrder(in)
}

func (s *OrderServer) CreateOrderGoods(ctx context.Context, in *order.CreateOrderGoodsRequest) (*order.CreateOrderGoodsResponse, error) {
	l := logic.NewCreateOrderGoodsLogic(ctx, s.svcCtx)
	return l.CreateOrderGoods(in)
}

func (s *OrderServer) GetOrderGoodsByOrderID(ctx context.Context, in *order.GetOrderGoodsByOrderIDRequest) (*order.GetOrderGoodsByOrderIDResponse, error) {
	l := logic.NewGetOrderGoodsByOrderIDLogic(ctx, s.svcCtx)
	return l.GetOrderGoodsByOrderID(in)
}

// TCC
func (s *OrderServer) TCCTradingOrder(ctx context.Context, in *order.TCCTradingOrderRequest) (*order.TCCTradingOrderResponse, error) {
	l := logic.NewTCCTradingOrderLogic(ctx, s.svcCtx)
	return l.TCCTradingOrder(in)
}

func (s *OrderServer) TCCTradingLockOrder(ctx context.Context, in *order.TCCTradingLockOrderRequest) (*order.TCCTradingLockOrderResponse, error) {
	l := logic.NewTCCTradingLockOrderLogic(ctx, s.svcCtx)
	return l.TCCTradingLockOrder(in)
}

func (s *OrderServer) TCCTradingRollbackOrder(ctx context.Context, in *order.TCCTradingRollbackOrderRequest) (*order.TCCTradingRollbackOrderResponse, error) {
	l := logic.NewTCCTradingRollbackOrderLogic(ctx, s.svcCtx)
	return l.TCCTradingRollbackOrder(in)
}
